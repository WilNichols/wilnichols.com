@use 'sass:list';
@use 'sass:math';
@use '../tokens';
@use '../mixins';

.icon {
  aspect-ratio: 1;
  display: block;
  min-width: var(--width);
  transform-origin: top left;
}

$macIcons: 1024px, 512px, 256px, 128px, 32px, 16px;

.icons-grid--macOS-max-512 {
  display: grid;
  width: calc(100dvw - 2 * var(--col));
  max-width: fit-content;
  gap: var(--u32);
  padding: var(--u32);
  box-shadow: inset 0 0 0 var(--px) var(--edgeColor);
  @mixin x1Grid {
    grid-template-columns: 
      auto 
      list.nth($macIcons, 2)
      list.nth($macIcons, 4)
      auto 
      auto;
    grid-template-rows: 
      list.nth($macIcons, 1)
      list.nth($macIcons, 3)
      list.nth($macIcons, 4)
      auto 
      auto;
    .icon--1024px {
      grid-row: 1 / 2;
      grid-column: 1 / -1;
    }
    .icon--512px {
      grid-row: 2 / 4;
      grid-column: 2 / 3;
    }
    .icon--256px {
      grid-row: 2 / 3;
      grid-column: 3 / 5;
    }
    .icon--128px {
      grid-row: 3 / 4;
      grid-column: 3 / 4;
    }
    .icon--32px {
      grid-row: 3 / 4;
      grid-column: 4 / 5;
    }
    .icon--16px {
      margin-top: calc(list.nth($macIcons, 5) + var(--u32));
      grid-row: 3 / 4;
      grid-column: 4 / 5;
    }
  }
  @mixin x2GridLandscape {
    grid-template-columns: 
      min(
        calc(list.nth($macIcons, 1) / var(--density)), 
        auto)
      calc(list.nth($macIcons, 3) / var(--density))
      auto;
    grid-template-rows: 
      calc(list.nth($macIcons, 2) / var(--density))
      auto;
    .icon--1024px {
      display: none;
    }
    .icon--512px {
      grid-row: 1 / 3;
      grid-column: 1 / 2;
      --width: min(100%, list.nth($macIcons, 2)) !important;
    }
    .icon--256px {
      grid-row: 1 / 2;
      grid-column: 2 / 4;
    }
    .icon--128px {
      grid-row: 2 / 3;
      grid-column: 2 / 3;
    }
    .icon--32px {
      grid-row: 2 / 3;
      grid-column: 2 / 3;
      margin-left: calc(list.nth($macIcons, 4) + var(--u32));
    }
    .icon--16px {
      margin-top: calc(list.nth($macIcons, 5) + var(--u32));
      margin-left: calc(list.nth($macIcons, 4) + var(--u32));
      grid-row: 2 / 3;
      grid-column: 2 / 3;
    }
  }
  @mixin x2GridPortrait {
    grid-template-columns: 
      auto 
      calc(list.nth($macIcons, 2) / var(--density))
      calc(list.nth($macIcons, 3) / var(--density))
      auto;
    grid-template-rows: 
      calc(list.nth($macIcons, 1) / var(--density))
      calc(list.nth($macIcons, 3) / var(--density))
      auto;
    .icon--1024px {
      display: none;
    }
    .icon--512px {
      grid-row: 1 / 2;
      grid-column: 1 / 5;
    }
    .icon--256px {
      grid-row: 2 / 4;
      grid-column: 2 / 3;
    }
    .icon--128px {
      grid-row: 2 / 3;
      grid-column: 3 / 4;
    }
    .icon--32px {
      grid-row: 3 / 4;
      grid-column: 3 / 4;
      margin-left: 0;
    }
    .icon--16px {
      margin-top: 0;
      margin-left: calc(list.nth($macIcons, 5) + var(--u32));
      grid-row: 3 / 4;
      grid-column: 3 / 4;
    }
  }
  @include x1Grid;
  // magic number @ which point 512px set to auto is equal to the sum of the 256px icon 32px gap and 128px icon
  @media (orientation: landscape) {
    @include mixins.x2 {
      @include x2GridLandscape;
    }
  }
  @media (orientation: portrait) {
    @include mixins.x2 {
      @include x2GridPortrait;
    }
  }
}

@each $macIcon in $macIcons {
  .icon--mac.icon--#{$macIcon} {
    --width: $macIcon;
    width: var(--width);
    @include mixins.x3 {
      width: calc(var(--width) * 2/3);
      max-width: 100%;
      aspect-ratio: 1;
    }
  }
}

// iPhone Old Grid
.icon-grid--iOS--old {
  /*  Icon sizes are 1x values, but graphics are only for 2x and 3x. */
  $icons: 512px, 72px, 57px, 29px;
  display: grid;
  grid-template-columns: var(--template-columns, auto);
  grid-template-rows: var(--template-rows, auto);
  gap: var(--u32);
  // set icon sizes
  .icon {
    // basics
    --width: calc(var(--dimension) / var(--density, 1));
    /* Wil, I'm here */
    width: var(--width);
    @include mixins.mask("/assets/img/ios-appicon-old-mask.svg");
    // force 512 size
    &--512px {
      --dimension: #{list.nth($icons, 1) * 2};
      /* Wil, I'm here */
    }
    // set size for all others
    @each $icon in $icons {
      @if list.index($icons, $icon) != 1 {
        &--#{$icon} {
          --dimension: #{$icon};
        }
      }
    }
    // smaller gap between 3x and 2x icons
    &--1x { 
      margin-left: calc(-1 * var(--u16));
    }
    // force 1x scale
    @include mixins.x1 {
       &--2x {
         --density: .5;
       }
       &--3x {
         --density: calc(1/3);
       }
     }
    // scales icons for 2x
    @include mixins.x2 {
      &--1x {
        --density: 2;
      }
      &--2x {
        --density: 1;
      }
      // another exception
      &--57.icon--1x {
        --width: list.nth($icon, 3) !important;
        transform: scale(.5);
      }
      // another exception
      &--29.icon--1x {
        --width: list.nth($icon, 4) !important;
        transform: scale(.5);
      }
      &--512 {
        --density: 2;
      }
    }
    // scales icons for 3x
    @include mixins.x3 {
      &--2x {
        --density: 1.5;
      } 
      &--3x {
        --density: 1;
      }
      &--29.icon--2x {
        transform: scale(calc(1/3));
        --width: list.nth($icon, 4) * 2 !important;
      }
      &--29.icon--3x {
        transform: scale(calc(1/3));
      }
      &--512 {
        transform: scale(calc(2/3));
      }
      &--512--container {
        @include mixins.share(width, height, math.div(list.nth($icons, 1) * 2, 3));
      }
    }
  }
  
  // sets icon sizes and masks  
  @include mixins.x1 {
    --template-columns: 
        1fr 
        #{list.nth($icons, 2) * 2}
        #{list.nth($icons, 2)}
        #{list.nth($icons, 3) * 2}
        #{list.nth($icons, 3)}
        #{list.nth($icons, 4) * 2}
        #{list.nth($icons, 4) - 16px}
        1fr;
    .caption--app-store {
      margin-bottom: var(--u16);
    }
    .caption--iPad-app, .caption--iPhone-app, .caption--settings {
      margin-bottom: calc(-1 * var(--u16));
    }
    .caption--iPad-app {
      grid-column: 2 / 4;
      grid-row: 2 / 3;
    }
    .caption--iPhone-app {
      grid-column: 4 / 6;
      grid-row: 2 / 3;
    }
    .caption--settings {
      grid-column: 6 / 8;
      grid-row: 2 / 3;
    }
    .icon--#{list.nth($icons, 1)}--container {
      grid-column: 1 / 9;
      grid-row: 1 / 2;
      margin: 0 auto;
      /* find me Wil */
    }
    .icon--#{list.nth($icons, 2)}.icon--2x {
      grid-column: 2 / 3;
      grid-row: 3 / 4;
    }
    .icon--#{list.nth($icons, 2)}.icon--1x {
      grid-column: 3 / 4;
      grid-row: 3 / 4;
    }
    .icon--#{list.nth($icons, 3)}.icon--2x {
      grid-column: 4 / 5;
      grid-row: 3 / 4;
    }
    .icon--#{list.nth($icons, 3)}.icon--1x {
      grid-column: 5 / 6;
      grid-row: 3 / 4;
    }
    .icon--#{list.nth($icons, 4)}.icon--2x {
      grid-column: 6 / 7;
      grid-row: 3 / 4;
    }
    .icon--#{list.nth($icons, 4)}.icon--1x {
      grid-column: 7 / 8;
      grid-row: 3 / 4;
    }
  }
  @include mixins.x2 {
    --template-columns: 
      1fr 
      #{list.nth($icons, 2)}
      #{list.nth($icons, 2) * .5 - 16px}
      #{list.nth($icons, 3)}
      #{list.nth($icons, 3) * .5 - 16px}
      #{list.nth($icons, 4)}
      0px
      1fr;
  }
  @include mixins.x3 {
    $row512: math.div(list.nth($icons, 1), 3) + 32px;
    $col60: math.div(list.nth($icons, 2), 3);
    $col40: math.div(list.nth($icons, 3), 3);
    $col29: 0;
    --template-columns: 
      1fr 
      48px
      8px
      38px
      3px
      20px
      0px
      1fr;
    --template-rows: 
      #{math.div(list.nth($icons, 1) * 2, 3) + 32px}
      1fr
    ;
  }
}

// Misc

@include tokens.textStyles;

.icon-grid .caption {
  font-size: var(--type--2);
  @extend %font--display-medium;
}

$icon32: (list.nth($macIcons, 5));
.case-study__toolbar-icons {
  display: flex;
  gap: var(--u32);
  .case-study-image--icons__icon {
    display: grid;
    flex-direction: column;
    gap: var(--u16);
    grid-template-rows: 
      calc(($icon32 * 2) / var(--density))
      calc($icon32 / var(--density));
  }  
}

.icon--32px--2x {
  width: calc(($icon32 * 2) / var(--density));
}

.icon--32px {
  width: calc(list.nth($macIcons, 5) / var(--density));
}
